# -*- coding: utf-8 -*-
"""парсер_vk.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZQJtjMeY58q-bTAcpXT4IjVK8EM_LkzK
"""
from dashboard.models import Region, Source, Resource, ModelDataTest
from tqdm import tqdm
import requests
import pandas as pd
from datetime import datetime
import pytz
import time
from concurrent.futures import ThreadPoolExecutor

# Определите максимальное количество потоков для многопоточности
MAX_THREADS = 5

def get_group_id(token, version, group_name):
    params = {
        'access_token': token,
        'v': version,
        'group_id': group_name
    }

    response = requests.get('https://api.vk.com/method/groups.getById', params=params)
    data = response.json()

    if 'error' in data:
        print(f"Error: {data['error']['error_msg']}")
        return None

    return -data['response'][0]['id']

def get_comments(token, version, owner_id, post_id):
    params = {
        'access_token': token,
        'v': version,
        'owner_id': owner_id,
        'post_id': post_id,
        'count': 100,
        'extended': 1
    }

    response = requests.get('https://api.vk.com/method/wall.getComments', params=params)
    data = response.json()

    if 'error' in data:
        print(f"Error: {data['error']['error_msg']}")
        return []

    comments = data['response']['items']
    return comments

def get_comment_likes(token, version, owner_id, comment_id):
    params = {
        'access_token': token,
        'v': version,
        'type': 'comment',
        'owner_id': owner_id,
        'item_id': comment_id,
        'filter': 'likes',
        'extended': 1,
        'count': 0
    }

    response = requests.get('https://api.vk.com/method/likes.getList', params=params)
    data = response.json()

    if 'error' in data:
        print(f"Error: {data['error']['error_msg']}")
        return 0

    likes_count = data['response']['count']
    return likes_count

def get_reply_likes(token, version, owner_id, reply_id):
    params = {
        'access_token': token,
        'v': version,
        'type': 'comment',
        'owner_id': owner_id,
        'item_id': reply_id,
        'filter': 'likes',
        'extended': 1,
        'count': 0
    }

    response = requests.get('https://api.vk.com/method/likes.getList', params=params)
    data = response.json()

    if 'error' in data:
        print(f"Error: {data['error']['error_msg']}")
        return 0

    likes_count = data['response']['count']
    return likes_count


def get_comment_replies(token, version, owner_id, comment_id):
    params = {
        'access_token': token,
        'v': version,
        'owner_id': owner_id,
        'comment_id': comment_id,
        'count': 100,
        'extended': 1
    }

    response = requests.get('https://api.vk.com/method/wall.getComments', params=params)
    data = response.json()

    if 'error' in data:
        print(f"Error: {data['error']['error_msg']}")
        return []

    replies = data['response']['items']
    return replies

def get_vk_wall_posts(token, version, owner_id, end_date, group_name, resource):
    print(f"Starting data collection for group: {group_name}")

    params = {
        'access_token': token,
        'v': version,
        'owner_id': owner_id,
        'count': 100,
        'extended': 1,
        'fields': 'post_type,comments,likes,reposts,views',
        'filter': 'all'
    }

    posts = []
    moscow_tz = pytz.timezone('Europe/Moscow')
    last_post_date = end_date

    with ThreadPoolExecutor(max_workers=MAX_THREADS) as executor:
        while True:
            params['offset'] = len(posts)  # Смещение устанавливается на количество уже полученных постов

            response = requests.get('https://api.vk.com/method/wall.get', params=params)
            data = response.json()

            if 'error' in data:
                print(f"Error: {data['error']['error_msg']}")
                break

            items = data['response']['items']

            if not items or last_post_date is None:
                print(f"No more posts in group {group_name}. Stopping data collection for this group.")
                break

            for item in tqdm(items, desc=f"Processing posts in {group_name}"):
                post_text = str(item['text'])
                post_date = datetime.fromtimestamp(item['date'], moscow_tz)
                post_time = post_date.strftime("%H:%M:%S")

                if post_date < end_date:
                    last_post_date = None  # Установка значения None для остановки сбора
                    break

                post = {
                    'ID': item['id'],
                    'Data': post_date.strftime("%Y-%m-%d"),
                    'Time': post_time,
                    'Resource_Name': group_name,
                    'Header': '',
                    'Text': post_text,
                    'Comments_Count': item['comments']['count'],
                    'Views': item['views']['count'],
                    'Rating': '',
                    'Count_Positive_Reactions': item['likes']['count'],
                    'Count_Negative_Reactions': '',
                    'Reposts': item['reposts']['count'],
                    'Comment_Text': '',
                    'Type': 'Пост',
                    'Garbage': '',
                    'Healthcare': '',
                    'Housing_and_Public_Utilities': '',
                    'Education': '',
                    'Infrastructure': '',
                    'Culture': '',
                    'Environmental_Conditions': '',
                    'Social_Security': '',
                    'Politics': '',
                    'Safety': '',
                    'Availability_of_Goods_and_Services': '',
                    'Official_Statements': '',
                    'Tourism': '',
                    'Facts': '',
                    'Positive': '',
                    'Negative': '',
                    'Neutral': ''
                }
                ModelDataTest.objects.create(
                    data=post['Data'],
                    time=post['Time'],
                    region= Region.objects.get(name=resource.source.region.name),
                    source=resource.source,
                    resource=resource,
                    text=post['Text'],
                    comment_text= "",
                    type_text=post['Type'],
                    category='',
                    tonality=''
                )
                if post_text:
                    posts.append(post)

                if item['comments']['count'] > 0:
                    # Используйте многопоточность для получения комментариев и лайков
                    comments_list = list(executor.map(lambda post_id: get_comments(token, version, owner_id, post_id), [item['id']]))
                    for comments in comments_list:
                        for comment in tqdm(comments, desc=f"Processing comments in {group_name}"):
                            comment_text = str(comment['text'])
                            comment_likes = get_comment_likes(token, version, owner_id, comment['id'])
                            comment_date = datetime.fromtimestamp(comment['date'], moscow_tz)
                            comment_time = comment_date.strftime("%H:%M:%S")
                            comment_post = {
                                'ID': comment['id'],
                                'Data': comment_date.strftime("%Y-%m-%d"),
                                'Time': comment_time,
                                'Resource_Name': group_name,
                                'Header': '',
                                'Text': post_text,
                                'Comments_Count': 0,
                                'Views': float('nan'),
                                'Rating': '',
                                'Count_Positive_Reactions': comment_likes,
                                'Count_Negative_Reactions': '',
                                'Reposts': 0,
                                'Comment_Text': comment['text'],
                                'Type': 'Комментарий',
                                'Garbage': '',
                                'Healthcare': '',
                                'Housing_and_Public_Utilities': '',
                                'Education': '',
                                'Infrastructure': '',
                                'Culture': '',
                                'Environmental_Conditions': '',
                                'Social_Security': '',
                                'Politics': '',
                                'Safety': '',
                                'Availability_of_Goods_and_Services': '',
                                'Official_Statements': '',
                                'Tourism': '',
                                'Facts': '',
                                'Positive': '',
                                'Negative': '',
                                'Neutral': ''
                            }
                            if comment_text:
                                posts.append(comment_post)

                            replies = get_comment_replies(token, version, owner_id, comment['id'])
                            for reply in tqdm(replies, desc=f"Processing replies in {group_name}"):
                                reply_text = str(reply['text'])
                                reply_likes = get_reply_likes(token, version, owner_id, reply['id'])
                                reply_date = datetime.fromtimestamp(reply['date'], moscow_tz)
                                reply_time = reply_date.strftime("%H:%M:%S")
                                reply_post = {
                                    'ID': reply['id'],
                                    'Data': reply_date.strftime("%Y-%m-%d"),
                                    'Time': reply_time,
                                    'Resource_Name': group_name,
                                    'Header': '',
                                    'Text': post_text + "\n\nКОММЕНТАРИЙ:\n" + comment_text,
                                    'Comments_Count': 0,
                                    'Views': float('nan'),
                                    'Rating': '',
                                    'Count_Positive_Reactions': reply_likes,
                                    'Count_Negative_Reactions': '',
                                    'Reposts': 0,
                                    'Comment_Text': reply['text'],
                                    'Type': 'Ответ на комментарий',
                                    'Garbage': '',
                                    'Healthcare': '',
                                    'Housing_and_Public_Utilities': '',
                                    'Education': '',
                                    'Infrastructure': '',
                                    'Culture': '',
                                    'Environmental_Conditions': '',
                                    'Social_Security': '',
                                    'Politics': '',
                                    'Safety': '',
                                    'Availability_of_Goods_and_Services': '',
                                    'Official_Statements': '',
                                    'Tourism': '',
                                    'Facts': '',
                                    'Positive': '',
                                    'Negative': '',
                                    'Neutral': ''
                                }
                                if reply_text:
                                    posts.append(reply_post)
                            time.sleep(3)

        return posts
